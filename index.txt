
// USING STACK

class Solution {
    public int singleNonDuplicate(int[] nums) {
        Stack <Integer> st =new Stack<>();
        st.push(nums[0]);
            for(int i=1;i<nums.length;i++){
                if(st.contains(nums[i])){
                    st.pop();
                }else st.push(nums[i]);
            }return st.peek();
    }
}

//USIN XOR

class Solution {
    public int singleNonDuplicate(int[] nums) {
         int result= 0;
        for(int i =0;i<nums.length;i++){
            result^=nums[i];
        }
        return result;
    }
}

//USING BINARY SEARCH

class Solution {
    public int singleNonDuplicate(int[] nums) {
        
        int low = 0;
        int high = nums.length - 1;
        while (low < high) {
            int mid = (low + high) / 2;
            if (mid % 2 == 1)
            --mid;
            if (nums[mid] == nums[mid + 1])
            low = mid + 2;
            else
            high = mid;
        }
    return nums[low];
    }
}